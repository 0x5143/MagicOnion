<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

// NOTE: Disable warnings for nullable reference types.
// `#nullable disable` causes compile error on old C# compilers (-7.3)
#pragma warning disable 8603 // Possible null reference return.
#pragma warning disable 8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.
#pragma warning disable 8625 // Cannot convert null literal to non-nullable reference type.

namespace <#= Namespace #>
{
    using System;
    using MessagePack;

    public class <#= ResolverName #> : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new <#= ResolverName #>();

        <#= ResolverName #>()
        {

        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.formatter;
        }

        static class FormatterCache<T>
        {
            public static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> formatter;

            static FormatterCache()
            {
                var f = <#= ResolverName #>GetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class <#= ResolverName #>GetFormatterHelper
    {
        static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static <#= ResolverName #>GetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(<#= RegisterInfos.Count #>)
            {
<# for(var i = 0; i < RegisterInfos.Count; i++) { var x = RegisterInfos[i]; #>
<#     if (x.HasIfDirectiveConditions) { #>
#if <#= string.Join(" || ", x.IfDirectiveConditions.Select(y => $"({y})")) #>
<#     } #>
                {typeof(<#= x.FullName #>), <#= i #> },
<#     if (x.HasIfDirectiveConditions) { #>
#endif
<#     } #>
<# } #>
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
<# for(var i = 0; i < RegisterInfos.Count; i++) { var x = RegisterInfos[i]; #>
<#     if (x.HasIfDirectiveConditions) { #>
#if <#= string.Join(" || ", x.IfDirectiveConditions.Select(y => $"({y})")) #>
<#     } #>
                case <#= i #>: return new <#= x.FormatterName.StartsWith("global::") ? x.FormatterName : (string.IsNullOrWhiteSpace(FormatterNamespace) ? "" : FormatterNamespace + ".") + x.FormatterName #>;
<#     if (x.HasIfDirectiveConditions) { #>
#endif
<#     } #>
<# } #>
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
