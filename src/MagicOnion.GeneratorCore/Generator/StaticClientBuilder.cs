#if FALSE
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MagicOnion.CodeAnalysis;

namespace MagicOnion.GeneratorCore.Generator
{
    internal class StaticClientBuilder
    {
        private class ServiceClientBuildContext
        {
            public ServiceClientBuildContext(ServiceClientDefinition definition)
            {
                Definition = definition;
            }

            public ServiceClientDefinition Definition { get; }

            public IndentedTextWriter TextWriter { get; set; }
        }

        public class TypeDef
        {
            public string FullName => string.IsNullOrWhiteSpace(Namespace) ? Name : Namespace + "." + Name;
            public string Name { get; }
            public string Namespace { get; }
        }

        internal class ServiceClientDefinition
        {
            public string Namespace { get; }
            public TypeDef ServiceInterfaceType { get; }
            public IReadOnlyList<ServiceClientMethod> Methods { get; }

            public ServiceClientDefinition(TypeDef serviceInterfaceType, IReadOnlyList<ServiceClientMethod> methods)
            {
                ServiceInterfaceType = serviceInterfaceType;
                Methods = methods;
            }

            public class ServiceClientMethod
            {
                public MethodType MethodType { get; }
                public string ServiceName { get; }
                public string MethodName { get; }
                public string Path { get; }
                public IReadOnlyList<TypeDef> ParameterTypes { get; }
                public TypeDef MethodReturnType { get; }
                public TypeDef RequestType { get; }
                public TypeDef ResponseType { get; }
            }
        }


        private static string Build()
        {
            var serviceClientDefinition = ServiceClientDefinition.CreateFromType<T>();
            var buildContext = new ServiceClientBuildContext(serviceClientDefinition);

            EmitPreamble(buildContext);
            EmitServiceClientClass(buildContext);
            EmitPostscript(buildContext);

            return buildContext.TextWriter.ToString();
        }

        private static void EmitPreamble(ServiceClientBuildContext ctx)
        {
            ctx.TextWriter.WriteLine("/// <auto-generated />");
            ctx.TextWriter.WriteLine("#pragma warning disable 618");
            ctx.TextWriter.WriteLine("#pragma warning disable 612");
            ctx.TextWriter.WriteLine("#pragma warning disable 414");
            ctx.TextWriter.WriteLine("#pragma warning disable 219");
            ctx.TextWriter.WriteLine("#pragma warning disable 168");
            ctx.TextWriter.WriteLine();
            ctx.TextWriter.WriteLine($"namespace {ctx.Definition.Namespace}");
            ctx.TextWriter.WriteLine("{");
            ctx.TextWriter.Indent++;
            ctx.TextWriter.WriteLine("using global::System;");
            ctx.TextWriter.WriteLine("using global::Grpc.Core;");
            ctx.TextWriter.WriteLine("using global::MagicOnion;");
            ctx.TextWriter.WriteLine("using global::MagicOnion.Client;");
            ctx.TextWriter.WriteLine("using global::MessagePack;");
            ctx.TextWriter.WriteLine();
        }

        private static void EmitPostscript(ServiceClientBuildContext ctx)
        {
            ctx.TextWriter.Indent--;
            ctx.TextWriter.WriteLine("}");
        }

        private static void EmitServiceClientClass(ServiceClientBuildContext ctx)
        {
            // [Ignore]
            // public class {ServiceName}Client : ClientBase<{ServiceName}>
            // {
            //
            ctx.TextWriter.WriteLine("[global::MagicOnion.Ignore]");
            ctx.TextWriter.WriteLine($"public class {ctx.Definition.ServiceInterfaceType.Name}");
            ctx.TextWriter.WriteLine("{");
            ctx.TextWriter.Indent++;
            {
                // class ClientCore { ... }
                EmitClientCore(ctx);
                // private readonly ClientCore core; ...
                EmitFields(ctx);
                // public {ServiceName}Client(MagicOnionClientOptions options, MessagePackSerializerOptions serializerOptions) { ... } 
                EmitConstructor(ctx);
                // protected override ClientBase<{ServiceName}> Clone(MagicOnionClientOptions options) => new {ServiceName}Client(options, core);
                EmitClone(ctx);
                // public {MethodType}Result<TResponse> MethodName(TArg1 arg1, TArg2 arg2, ...) => this.core.MethodName.Invoke{MethodType}(this, "ServiceName/MethodName", new DynamicArgumentTuple<T1, T2, ...>(arg1, arg2, ...)); ...
                EmitServiceMethods(ctx);
            }
            ctx.TextWriter.Indent--;
            ctx.TextWriter.WriteLine("}");
            // }
        }

        private static void EmitClone(ServiceClientBuildContext ctx)
        {
            // protected override MagicOnionClientBase<{ServiceName}> Clone(MagicOnionClientOptions options) => new {ServiceName}Client(options, core);
            ctx.TextWriter.WriteLine($"protected override global::MagicOnion.Client.MagicOnionClientBase<{ctx.Definition.ServiceInterfaceType.Name}> Clone(ClientOptions options) => new {ctx.Definition.ServiceInterfaceType.Name}Client(options, core);");
            ctx.TextWriter.WriteLine();
        }

        private static void EmitConstructor(ServiceClientBuildContext ctx)
        {
            // public {ServiceName}Client(MagicOnionClientOptions options, MessagePackSerializerOptions serializerOptions) {
            ctx.TextWriter.WriteLine($"public {ctx.Definition.ServiceInterfaceType.Name}Client(global::MagicOnion.Client.MagicOnionClientOptions options, global::MessagePack.MessagePackSerializerOptions serializerOptions)");
            ctx.TextWriter.WriteLine("{");
            ctx.TextWriter.Indent++;
            {
                // base(options);
                ctx.TextWriter.WriteLine("base(options);");
                // this.core = new ClientCore(serializerOptions);
                ctx.TextWriter.WriteLine("this.core = new ClientCore(serializerOptions);");
            }
            // }
            ctx.TextWriter.Indent--;
            ctx.TextWriter.WriteLine("{");
        }

        private static void EmitFields(ServiceClientBuildContext ctx)
        {
            // private readonly ClientCore core;
            ctx.TextWriter.WriteLine("readonly ClientCore core;");
            ctx.TextWriter.WriteLine();
        }

        private static void EmitServiceMethods(ServiceClientBuildContext ctx)
        {
            // Implements
            // public UnaryResult<TResponse> MethodName(TArg1 arg1, TArg2 arg2, ...)
            //     => this.core.MethodName.InvokeUnary(this, "ServiceName/MethodName", new DynamicArgumentTuple<T1, T2, ...>(arg1, arg2, ...));
            // public UnaryResult<TResponse> MethodName(TRequest request)
            //     => this.core.MethodName.InvokeUnary(this, "ServiceName/MethodName", request);
            // public UnaryResult<TResponse> MethodName()
            //     => this.core.MethodName.InvokeUnary(this, "ServiceName/MethodName", Nil.Default);
            // public Task<ServerStreamingResult<TRequest, TResponse>> MethodName(TArg1 arg1, TArg2 arg2, ...)
            //     => this.core.MethodName.InvokeServerStreaming(this, "ServiceName/MethodName", new DynamicArgumentTuple<T1, T2, ...>(arg1, arg2, ...));
            // public Task<ClientStreamingResult<TRequest, TResponse>> MethodName()
            //     => this.core.MethodName.InvokeClientStreaming(this, "ServiceName/MethodName");
            // public Task<DuplexStreamingResult<TRequest, TResponse>> MethodName()
            //     => this.core.MethodName.InvokeDuplexStreaming(this, "ServiceName/MethodName");
            foreach (var method in ctx.Definition.Methods)
            {
                var resultType = method.MethodType switch
                {
                    MethodType.Unary => $"global::MagicOnion.UnaryResult<{method.ResponseType.FullName}>",
                    MethodType.ClientStreaming => $"global::System.Threading.Tasks.Task<Task<global::MagicOnion.ClientStreamingResult<{method.RequestType.FullName}, {method.ResponseType.FullName}>>",
                    MethodType.ServerStreaming => $"global::System.Threading.Tasks.Task<global::MagicOnion.ServerStreamingResult<{method.ResponseType.FullName}>>",
                    MethodType.DuplexStreaming => $"global::System.Threading.Tasks.Task<global::MagicOnion.DuplexStreamingResult<{method.RequestType.FullName}, {method.ResponseType.FullName}>>",
                };

                ctx.TextWriter.WriteLine($"public {method.MethodReturnType.FullName} {method.MethodName}({string.Join(", ", method.ParameterTypes.Select((x, i) => $"{x} arg{i}"))})");
                ctx.TextWriter.Write("{");
                ctx.TextWriter.Indent++;
                ctx.TextWriter.Write($"return this.core.{method.MethodName}(this, method.Path");
                if (method.MethodType == MethodType.Unary || method.MethodType == MethodType.ServerStreaming)
                {
                    if (method.ParameterTypes.Count > 0)
                    {
                        if (method.ParameterTypes.Count == 1)
                        {
                            // arg1
                            ctx.TextWriter.WriteLine(", arg0");
                        }
                        else
                        {
                            // new DynamicArgumentTuple(arg1, arg2, ...)
                            ctx.TextWriter.WriteLine($", new global::MagicOnion.DynamicArgumentTuple<{string.Join(", ", method.ParameterTypes.Select((x, i) => $"{x}"))}>({string.Join(", ", method.ParameterTypes.Select((x, i) => $"arg{i}"))})");
                        }
                    }
                    else if (method.ParameterTypes.Count == 0)
                    {
                        // Nil.Default
                        ctx.TextWriter.WriteLine(", global::MessagePack.Nil.Default");
                    }
                }
                else
                {
                    // Invoker for ClientStreaming, DuplexStreaming has no request parameter.
                }

                // );
                ctx.TextWriter.WriteLine(");");
                ctx.TextWriter.Indent--;
                ctx.TextWriter.Write("}");
            }
        }

        private static void EmitClientCore(ServiceClientBuildContext ctx)
        {
            /*
             * class ClientCore
             * {
             *     // UnaryResult<string> HelloAsync(string name, int age);
             *     public UnaryMethodRawInvoker<DynamicArgumentTuple<string, int>, string> HelloAsync;
             *
             *     public ClientCore(MessagePackSerializer options)
             *     {
             *         this.HelloAsync = UnaryMethodRawInvoker.Create_ValueType_RefType<DynamicArgumentTuple<string, int>, string>("IGreeterService", "HelloAsync", options);
             *     }
             * }
             */

            // class ClientCore {
            ctx.TextWriter.WriteLine("class ClientCore");
            ctx.TextWriter.WriteLine("{");
            ctx.TextWriter.Indent++;
            {
                // public RawMethodInvoker<TRequest, TResponse> MethodName;
                foreach (var method in ctx.Definition.Methods)
                {
                    ctx.TextWriter.WriteLine($"public global::MagicOnion.Client.Internal.RawMethodInvoker<{method.RequestType.FullName}, {method.ResponseType.FullName}> {method.MethodName};");
                }

                // public ClientCore(MessagePackSerializerOptions serializerOptions) {
                ctx.TextWriter.WriteLine("public ClientCore(global::MessagePack.MessagePackSerializerOptions serializerOptions");
                ctx.TextWriter.WriteLine("{");
                ctx.TextWriter.Indent++;
                {
                    // MethodName = RawMethodInvoker.Create_XXXType_XXXType<TRequest, TResponse>(MethodType, ServiceName, MethodName, serializerOptions);
                    foreach (var method in ctx.Definition.Methods)
                    {
                        var createMethodVariant = "ValueType_ValueType";
                        ctx.TextWriter.Write($"this.{method.MethodName} = global::MagicOnion.Client.Internal.RawMethodInvoker.Create_{createMethodVariant}(global::Grpc.Core.MethodType.{method.MethodType}, \"{method.ServiceName}\", \"{method.MethodName}\", serializerOptions);");
                    }
                }
                ctx.TextWriter.Indent--;
                ctx.TextWriter.WriteLine("}");
                // }
            }
            // }
            ctx.TextWriter.Indent--;
            ctx.TextWriter.WriteLine("}");
        }
    }


}
#endif