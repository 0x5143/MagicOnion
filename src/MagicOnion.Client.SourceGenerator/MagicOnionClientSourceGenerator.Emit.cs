using System.Collections.Immutable;
using MagicOnion.Client.SourceGenerator.CodeAnalysis;
using Microsoft.CodeAnalysis;

namespace MagicOnion.Client.SourceGenerator;

public readonly record struct GenerationContext(string? Namespace, string InitializerPartialTypeName, SourceProductionContext SourceProductionContext);

public partial class MagicOnionClientSourceGenerator
{
    public const string SourceGeneratorAttributesHintName = "MagicOnionClientSourceGeneratorAttributes.g.cs";
    public const string MagicOnionClientGenerationAttributeName = "MagicOnionClientGenerationAttribute";
    public const string MagicOnionClientGenerationAttributeFullName = $"MagicOnion.Client.{MagicOnionClientGenerationAttributeName}";

    static void AddAttributeSources(Action<string, string> addSource)
    {
        addSource(SourceGeneratorAttributesHintName, $$"""
            // <auto-generated />
            namespace MagicOnion.Client
            {
                [global::System.Diagnostics.Conditional("__MagicOnion_Client_SourceGenerator__DesignTimeOnly__")]
                [global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false)]
                internal class {{MagicOnionClientGenerationAttributeName}} : global::System.Attribute
                {
                    public bool DisableAutoRegister { get; init; }
                    public global::MagicOnion.Client.GenerateSerializerType Serializer { get; init; } = global::MagicOnion.Client.GenerateSerializerType.MessagePack;
                    public global::System.Type[] TypesContainedInTargetAssembly { get; }

                    public {{MagicOnionClientGenerationAttributeName}}(params global::System.Type[] typesContainedInTargetAssembly)
                    {
                        TypesContainedInTargetAssembly = typesContainedInTargetAssembly;
                    }
                }

                internal enum GenerateSerializerType
                {
                    MessagePack,
                    MemoryPack
                }
            }
            """);
    }

    static void Generate(GenerationContext context, ImmutableArray<SyntaxNode> interfaces, Compilation compilation, ReferenceSymbols referenceSymbols)
    {
        var interfaceSymbols = interfaces.Select(x => (INamedTypeSymbol)compilation.GetSemanticModel(x.SyntaxTree).GetDeclaredSymbol(x)!).ToImmutableArray();
        Generate(context, interfaceSymbols, referenceSymbols);
    }

    static void Generate(GenerationContext context, ImmutableArray<INamedTypeSymbol> interfaceSymbols, ReferenceSymbols referenceSymbols)
    {
        var (serviceCollection, diagnostics) = MethodCollector.Collect(interfaceSymbols, referenceSymbols, context.SourceProductionContext.CancellationToken);
        var generated = MagicOnionClientGenerator.Generate(context, serviceCollection, context.SourceProductionContext.CancellationToken);

        foreach (var diagnostic in diagnostics)
        {
            context.SourceProductionContext.ReportDiagnostic(diagnostic);
        }

        foreach (var (path, source) in generated)
        {
            context.SourceProductionContext.AddSource(path, source);
        }
    }
}
