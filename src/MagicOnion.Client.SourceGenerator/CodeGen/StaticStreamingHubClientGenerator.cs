using System.CodeDom.Compiler;
using MagicOnion.Client.SourceGenerator.CodeAnalysis;
using MagicOnion.Client.SourceGenerator.CodeGen.Extensions;
using MagicOnion.Client.SourceGenerator.Internal;

namespace MagicOnion.Client.SourceGenerator.CodeGen;

public class StaticStreamingHubClientGenerator
{
    class StreamingHubClientBuildContext
    {
        public StreamingHubClientBuildContext(MagicOnionStreamingHubInfo hub, TextWriter textWriter)
        {
            Hub = hub;
            TextWriter = textWriter;
        }

        public MagicOnionStreamingHubInfo Hub { get; }

        public TextWriter TextWriter { get; }
    }

    public static string Build(GenerationContext generationContext, IEnumerable<MagicOnionStreamingHubInfo> hubs)
    {
        var baseWriter = new StringWriter();
        var textWriter = new IndentedTextWriter(baseWriter);

        EmitHeader(generationContext, textWriter);

        foreach (var hubInfo in hubs)
        {
            var buildContext = new StreamingHubClientBuildContext(hubInfo, textWriter);

            EmitPreamble(generationContext, buildContext);
            EmitHubClientClass(generationContext, buildContext);
            EmitPostscript(generationContext, buildContext);
        }

        return baseWriter.ToString();
    }

    static void EmitHeader(GenerationContext generationContext, IndentedTextWriter textWriter)
    {
        textWriter.WriteLines("""
            // <auto-generated />
            #pragma warning disable CS0618 // 'member' is obsolete: 'text'
            #pragma warning disable CS0612 // 'member' is obsolete
            #pragma warning disable CS0414 // The private field 'field' is assigned but its value is never used
            #pragma warning disable CS8019 // Unnecessary using directive.

            """);
    }

    static void EmitPreamble(GenerationContext generationContext, StreamingHubClientBuildContext ctx)
    {
        if (!string.IsNullOrWhiteSpace(generationContext.Namespace))
        {
            ctx.TextWriter.WriteLine($$"""
            namespace {{generationContext.Namespace}}
            {
            """);
        }
        ctx.TextWriter.WriteLine($$"""
                using global::System;
                using global::Grpc.Core;
                using global::MagicOnion;
                using global::MagicOnion.Client;
                using global::MessagePack;

                partial class {{generationContext.InitializerPartialTypeName}}
                {
                    static partial class MagicOnionGeneratedClient
                    {
            """);
    }

    static void EmitPostscript(GenerationContext generationContext, StreamingHubClientBuildContext ctx)
    {
        ctx.TextWriter.WriteLine("""
                    }
                }
            """);

        if (!string.IsNullOrWhiteSpace(generationContext.Namespace))
        {
            ctx.TextWriter.WriteLine("""
            }
            """);
        }
    }

    static void EmitHubClientClass(GenerationContext generationContext, StreamingHubClientBuildContext ctx)
    {
        ctx.TextWriter.WriteLine($$"""
                        [global::MagicOnion.Ignore]
                        public class {{ctx.Hub.GetClientFullName()}} : global::MagicOnion.Client.StreamingHubClientBase<{{ctx.Hub.ServiceType.FullName}}, {{ctx.Hub.Receiver.ReceiverType.FullName}}>, {{ctx.Hub.ServiceType.FullName}}
                        {
            """);
        EmitProperties(ctx);
        EmitConstructor(ctx);
        EmitHubMethods(ctx, isFireAndForget: false);
        EmitFireAndForget(ctx);
        EmitOnBroadcastEvent(ctx);
        EmitOnResponseEvent(ctx);
        ctx.TextWriter.WriteLine("""
                        }
            """);
        // }
    }

    static void EmitProperties(StreamingHubClientBuildContext ctx)
    {
        ctx.TextWriter.WriteLine("""
                            protected override global::Grpc.Core.Method<global::System.Byte[], global::System.Byte[]> DuplexStreamingAsyncMethod { get; }

            """);
    }
    
    static void EmitConstructor(StreamingHubClientBuildContext ctx)
    {
        ctx.TextWriter.WriteLine($$"""
                            public {{ctx.Hub.GetClientFullName()}}(global::Grpc.Core.CallInvoker callInvoker, global::System.String host, global::Grpc.Core.CallOptions options, global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider, global::MagicOnion.Client.IMagicOnionClientLogger logger)
                                : base(callInvoker, host, options, serializerProvider, logger)
                            {
                                var marshaller = global::MagicOnion.MagicOnionMarshallers.ThroughMarshaller;
                                DuplexStreamingAsyncMethod = new global::Grpc.Core.Method<global::System.Byte[], global::System.Byte[]>(global::Grpc.Core.MethodType.DuplexStreaming, "{{ctx.Hub.ServiceType.Name}}", "Connect", marshaller, marshaller);
                            }
            """);
        ctx.TextWriter.WriteLine();
    }

    static void EmitFireAndForget(StreamingHubClientBuildContext ctx)
    {
        ctx.TextWriter.WriteLine($$"""
                            public {{ctx.Hub.ServiceType.FullName}} FireAndForget()
                                => new FireAndForgetClient(this);
                                
                            [global::MagicOnion.Ignore]
                            class FireAndForgetClient : {{ctx.Hub.ServiceType.FullName}}
                            {
                                readonly {{ctx.Hub.GetClientFullName()}} parent;

                                public FireAndForgetClient({{ctx.Hub.GetClientFullName()}} parent)
                                    => this.parent = parent;

                                public {{ctx.Hub.ServiceType.FullName}} FireAndForget() => this;
                                public global::System.Threading.Tasks.Task DisposeAsync() => throw new global::System.NotSupportedException();
                                public global::System.Threading.Tasks.Task WaitForDisconnect() => throw new global::System.NotSupportedException();

            """);
        EmitHubMethods(ctx, isFireAndForget: true);
        ctx.TextWriter.WriteLine("""
                            }

            """);
    }

    static void EmitHubMethods(StreamingHubClientBuildContext ctx, bool isFireAndForget)
    {
        // public Task MethodReturnWithoutValue()
        //     => WriteMessageWithResponseAsync<MessagePack.Nil, MessagePack.Nil>(FNV1A32.GetHashCode(nameof(MethodReturnWithoutValue)), MessagePack.Nil.Default);
        // public Task<int> MethodParameterless()
        //     => WriteMessageWithResponseAsync<MessagePack.Nil, int>(FNV1A32.GetHashCode(nameof(MethodParameterless)), MessagePack.Nil.Default);
        // public Task<int> MethodParameter_One(int arg0)
        //     => WriteMessageWithResponseAsync<int, int>(FNV1A32.GetHashCode(nameof(MethodParameter_One)), arg0);
        // public Task<int> MethodParameter_Many(int arg0, string arg1)
        //     => WriteMessageWithResponseAsync<DynamicArgumentTuple<int, string>, int>(FNV1A32.GetHashCode(nameof(MethodParameter_Many)), new DynamicArgumentTuple<int, string>(arg0, arg1));
        foreach (var method in ctx.Hub.Methods)
        {
            var writeMessageParameters = method.Parameters.Count switch
            {
                // Nil.Default
                0 => $", global::MessagePack.Nil.Default",
                // arg0
                1 => $", {method.Parameters[0].Name}",
                // new DynamicArgumentTuple(arg1, arg2, ...)
                _ => $", {method.Parameters.ToNewDynamicArgumentTuple()}",
            };

            if (isFireAndForget) ctx.TextWriter.Write("    ");
            ctx.TextWriter.WriteLine($"""
                            public {method.MethodReturnType.FullName} {method.MethodName}({method.Parameters.ToMethodSignaturize()})
            """);

            if (isFireAndForget) ctx.TextWriter.Write("    ");
            if (method.MethodReturnType == MagicOnionTypeInfo.KnownTypes.System_Threading_Tasks_ValueTask)
            {
                // ValueTask
                ctx.TextWriter.WriteLine($"""
                                => new global::System.Threading.Tasks.ValueTask({(isFireAndForget ? "parent.WriteMessageFireAndForgetAsync" : "base.WriteMessageWithResponseAsync")}<{method.RequestType.FullName}, {method.ResponseType.FullName}>({method.HubId}{writeMessageParameters}));
            """);
            }
            else if (method.MethodReturnType.HasGenericArguments && method.MethodReturnType.GetGenericTypeDefinition() == MagicOnionTypeInfo.KnownTypes.System_Threading_Tasks_ValueTask)
            {
                // ValueTask<T>
                ctx.TextWriter.WriteLine($"""
                                => new global::System.Threading.Tasks.ValueTask<{method.ResponseType.FullName}>({(isFireAndForget ? "parent.WriteMessageFireAndForgetAsync" : "base.WriteMessageWithResponseAsync")}<{method.RequestType.FullName}, {method.ResponseType.FullName}>({method.HubId}{writeMessageParameters}));
            """);
            }
            else
            {
                // Task, Task<T>
                ctx.TextWriter.WriteLine($"""
                                => {(isFireAndForget ? "parent.WriteMessageFireAndForgetAsync" : "base.WriteMessageWithResponseAsync")}<{method.RequestType.FullName}, {method.ResponseType.FullName}>({method.HubId}{writeMessageParameters});
            """);
            }
        }

        ctx.TextWriter.WriteLine();
    }

    static void EmitOnBroadcastEvent(StreamingHubClientBuildContext ctx)
    {
        ctx.TextWriter.WriteLine("""
                            protected override void OnBroadcastEvent(global::System.Int32 methodId, global::System.ArraySegment<global::System.Byte> data)
                            {
                                switch (methodId)
                                {
            """);
        foreach (var method in ctx.Hub.Receiver.Methods)
        {
            var methodArgs = method.Parameters.Count switch
            {
                0 => "",
                1 => "value",
                _ => string.Join(", ", Enumerable.Range(1, method.Parameters.Count).Select(x => $"value.Item{x}"))
            };

            ctx.TextWriter.WriteLine($$"""
                                    case {{method.HubId}}: // {{method.MethodReturnType.ToDisplayName()}} {{method.MethodName}}({{method.Parameters.ToMethodSignaturize()}})
                                        {
                                            var value = base.Deserialize<{{method.RequestType.FullName}}>(data);
                                            receiver.{{method.MethodName}}({{methodArgs}});
                                        }
                                        break;
            """);
        }
        ctx.TextWriter.WriteLine("""
                                }
                            }

            """);
    }

    static void EmitOnResponseEvent(StreamingHubClientBuildContext ctx)
    {
        ctx.TextWriter.WriteLine("""
                            protected override void OnResponseEvent(global::System.Int32 methodId, global::System.Object taskCompletionSource, global::System.ArraySegment<global::System.Byte> data)
                            {
                                switch (methodId)
                                {
            """);
        foreach (var method in ctx.Hub.Methods)
        {
            ctx.TextWriter.WriteLine($$"""
                                    case {{method.HubId}}: // {{method.MethodReturnType.ToDisplayName()}} {{method.MethodName}}({{method.Parameters.ToMethodSignaturize()}})
                                        base.SetResultForResponse<{{method.ResponseType.FullName}}>(taskCompletionSource, data);
                                        break;
            """);
        }
        ctx.TextWriter.WriteLine("""
                                }
                            }

            """);
    }
}
