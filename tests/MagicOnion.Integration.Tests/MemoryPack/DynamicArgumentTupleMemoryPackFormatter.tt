<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated />
#pragma warning disable CS8669

using System.Runtime.CompilerServices;
using MemoryPack;

namespace MagicOnion.Integration.Tests.MemoryPack;

internal class DynamicArgumentTupleFormatter
{
    [ModuleInitializer]
    public static void Register()
    {
<# for (var i = 2; i < 16; i++) {
#>
        MemoryPackFormatterProvider.RegisterGenericType(typeof(DynamicArgumentTuple<<#= new String(',', i - 1) #>>), typeof(DynamicArgumentTupleFormatter<<#= new String(',', i - 1) #>>));
<# } #>
    }
}

<# for (var i = 2; i < 16; i++) {
    var dynamicArgumentTupleFormatterGenericArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => $"T{x}"));
    var dynamicArgumentTupleGenericArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => $"T{x}?"));
#>
internal class DynamicArgumentTupleFormatter<<#= dynamicArgumentTupleFormatterGenericArgs #>> : MemoryPackFormatter<DynamicArgumentTuple<<#= dynamicArgumentTupleGenericArgs #>>>
{
    public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, scoped ref DynamicArgumentTuple<<#= dynamicArgumentTupleGenericArgs #>> value)
    {
        if (!System.Runtime.CompilerServices.RuntimeHelpers.IsReferenceOrContainsReferences<DynamicArgumentTuple<<#= dynamicArgumentTupleGenericArgs #>>>())
        {
            writer.DangerousWriteUnmanaged(value);
            return;
        }
<#     for (var j = 1; j <= i; j++) { #>
        writer.WriteValue(value.Item<#= j #>);
<#     } #>
    }

    public override void Deserialize(ref MemoryPackReader reader, scoped ref DynamicArgumentTuple<<#= dynamicArgumentTupleGenericArgs #>> value)
    {
        if (!System.Runtime.CompilerServices.RuntimeHelpers.IsReferenceOrContainsReferences<DynamicArgumentTuple<<#= dynamicArgumentTupleGenericArgs #>>>())
        {
            reader.DangerousReadUnmanaged(out value);
            return;
        }

        value = new DynamicArgumentTuple<<#= dynamicArgumentTupleGenericArgs #>>(
<#     for (var j = 1; j <= i; j++) { #>
            <# if (j != 1) { #>, <# } #>reader.ReadValue<T<#= j #>?>()
<#     } #>
        );
    }
}
<# } #>
