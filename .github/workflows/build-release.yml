name: build-release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*" # only tag

jobs:
  build-push:
    strategy:
      matrix:
        dotnet: ["3.1.201"] # support latest only
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      NUGET_XMLDOC_MODE: skip
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}
      # tag
      - run: echo ::set-env name=GIT_TAG::${GITHUB_REF#refs/tags/}
      # build
      - run: dotnet build ./src/MagicOnion/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Abstractions/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Hosting/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.HttpGateway/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Redis/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.OpenTelemetry/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.MSBuild.Tasks/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Generator/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Server.Authentication/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.OpenTelemetry/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      # test
      # - run: dotnet test ./tests/MagicOnion.NetCoreTests/ -c Release
      # - run: dotnet test ./tests/MagicOnion.Hosting.Tests/ -c Release
      # pack nuget
      - run: dotnet pack ./src/MagicOnion/MagicOnion.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Abstractions/MagicOnion.Abstractions.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Hosting/MagicOnion.Hosting.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.HttpGateway/MagicOnion.HttpGateway.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Redis/MagicOnion.Redis.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.OpenTelemetry/MagicOnion.OpenTelemetry.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.MSBuild.Tasks/MagicOnion.MSBuild.Tasks.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Generator/MagicOnion.Generator.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Server.Authentication/MagicOnion.Server.Authentication.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - uses: actions/upload-artifact@v1
        with:
          name: nuget
          path: ./publish/
      # publish moc
      - run: dotnet publish ./src/MagicOnion.Generator/ -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeSymbolsInSingleFile=true --self-contained -r win-x64 -o ./src/MagicOnion.Generator/bin/moc/win-x64
      - run: dotnet publish ./src/MagicOnion.Generator/ -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeSymbolsInSingleFile=true --self-contained -r linux-x64 -o ./src/MagicOnion.Generator/bin/moc/linux-x64
      - run: dotnet publish ./src/MagicOnion.Generator/ -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeSymbolsInSingleFile=true --self-contained -r osx-x64 -o ./src/MagicOnion.Generator/bin/moc/osx-x64
      - run: apt update && apt install zip -y
      - run: zip -r moc.${{ env.GIT_TAG }}.zip ./src/MagicOnion.Generator/bin/moc
      - uses: actions/upload-artifact@v1
        with:
          name: moc.${{ env.GIT_TAG }}.zip
          path: ./moc.${{ env.GIT_TAG }}.zip

  build-unity:
    strategy:
      matrix:
        unity: ["2018.3.12f1"]
    runs-on: ubuntu-latest
    container:
      # https://hub.docker.com/r/gableroux/unity3d/tags
      image: gableroux/unity3d:${{ matrix.unity }}-windows
    steps:
      - run: apt update && apt install git -y
      - uses: actions/checkout@v2
      # get activation file, if fail to activate unity, use this key and activate from https://license.unity3d.com/manual
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -logFile -createManualActivationFile || exit 0
      - run: cat Unity_v${{ matrix.unity }}.alf # file name same as image's version
      # get from UNITY_LICENSE envvar(base64 encoded(cat foo.ulf | base64 )), this file is generated from above manual activation
      - run: echo ${UNITY_LICENSE} | base64 -di  >> .circleci/Unity.ulf
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -manualLicenseFile .circleci/Unity.ulf || exit 0
      # Execute scripts(in Linux, currently does not supported IL2CPP so it run on mono)
      - name: Export unitypackage
        run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod PackageExporter.Export
        working-directory: src/MagicOnion.Client.Unity
      - uses: actions/upload-artifact@v1
        with:
          name: MagicOnion.Client.Unity.unitypackage
          path: ./src/MagicOnion.Client.Unity/MagicOnion.Client.Unity.unitypackage

  create-release:
    needs: [build-unity, build-unity]
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      NUGET_XMLDOC_MODE: skip
    steps:
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101
      - run: echo ::set-env name=GIT_TAG::${GITHUB_REF#refs/tags/}
      # Create Release
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Ver.${{ github.ref }}
          draft: true
          prerelease: false
      - uses: actions/download-artifact@v2
      # Upload to NuGet
      - run: dotnet nuget push ./MagicOnion.${{ env.GIT_TAG }}.nupkg -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}
      - run: dotnet nuget push ./MagicOnion.Abstractions.${{ env.GIT_TAG }}.nupkg -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}
      - run: dotnet nuget push ./MagicOnion.Hosting.${{ env.GIT_TAG }}.nupkg -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}
      - run: dotnet nuget push ./MagicOnion.HttpGateway.${{ env.GIT_TAG }}.nupkg -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}
      - run: dotnet nuget push ./MagicOnion.Redis.${{ env.GIT_TAG }}.nupkg -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}
      - run: dotnet nuget push ./MagicOnion.OpenTelemetry.${{ env.GIT_TAG }}.nupkg -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}
      - run: dotnet nuget push ./MagicOnion.MSBuild.Tasks.${{ env.GIT_TAG }}.nupkg -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}
      - run: dotnet nuget push ./MagicOnion.Generator.${{ env.GIT_TAG }}.nupkg -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}
      - run: dotnet nuget push ./MagicOnion.Server.Authentication.${{ env.GIT_TAG }}.nupkg -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}
      # Upload to Releases(unitypackage)
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./MagicOnion.Client.Unity.unitypackage
          asset_name: MagicOnion.Client.Unity.unitypackage
